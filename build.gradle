buildscript {
  ext {
    springBootVersion = '1.3.0.RELEASE'
    nebulaPluginVersion = '2.2.+'
    dependencyManagementPluginVersion = "0.5.2.RELEASE"
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPluginVersion"
    classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$nebulaPluginVersion"
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2"
  }
}

group = "ru.microbot"
version = "0.0.1-SNAPSHOT"

allprojects {
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'provided-base'

  repositories {
    jcenter()
    mavenCentral()
  }

  dependencyManagement {
    imports {
      mavenBom 'io.spring.platform:platform-bom:2.0.0.RELEASE'
      mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3"
    }

    dependencies {
      dependency 'org.codehaus.groovy:groovy-all:2.4.5'
      dependency 'org.spockframework:spock-core:1.0-groovy-2.4'
      dependency 'org.spockframework:spock-spring:1.0-groovy-2.4'
      dependency 'org.springframework.restdocs:spring-restdocs-mockmvc:1.0.0.RELEASE'
      dependency 'net.logstash.logback:logstash-logback-encoder:4.4'
      dependency 'com.github.pengrad:java-telegram-bot-api:1.2.3'
      dependency 'io.reactivex:rxjava:1.0.17'
      dependency 'com.squareup.okhttp:okhttp:2.6.0'
    }
  }
}


subprojects { p ->
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'

  tasks.withType(FindBugs) {
    exclude '*.json'
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  jar {
    archiveName = project.name + ".jar"
  }

  dependencies {
    compile 'com.github.pengrad:java-telegram-bot-api'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'io.reactivex:rxjava'
//    compile('org.springframework.boot:spring-boot-starter-cache')
//    compile('org.springframework.cloud:spring-cloud-starter-config')
//    compile('org.springframework.cloud:spring-cloud-starter-eureka')
//    compile('org.springframework.cloud:spring-cloud-starter-feign')
//    compile('org.springframework.cloud:spring-cloud-starter-hystrix')
//    compile('org.springframework.cloud:spring-cloud-starter-ribbon')
//    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.projectlombok:lombok')
    compile('org.codehaus.groovy:groovy-all')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile 'org.spockframework:spock-core'
    testCompile 'org.spockframework:spock-spring'
  }

  test {
    reports {
      junitXml.enabled = true
      html.enabled = true
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }
    }
  }

  String repo = p.version.endsWith('SNAPSHOT') ? 'snapshots' : 'releases'
  artifactoryPublish.doLast {
    def PADDING = 50
    log "Upload Artifact".center(60, '.')
    log repo, "to repo"
    log pr.version, version
    log artifactory_contextUrl, 'repository url'
    log artifactory_user, 'repository user'
  }

  artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
      repository {
        repoKey = repo
        username = "${artifactory_user}"
        password = "${artifactory_password}"
        maven = true
      }
      defaults {
        publications('mavenJava')
      }
    }
    resolve {
      repository {
        repoKey = 'public'
        username = "${artifactory_user}"
        password = "${artifactory_password}"
        maven = true
      }
    }
  }

  artifactoryPublish.dependsOn {
    ['generatePomFileForMavenJavaPublication', 'build'].find { tasks.findByName(it) }
  }

}


def log(msg, header = null) {
  if (header) {
    def PADDING = 30
    logger.quiet "$header ".padRight(PADDING, '.') + " $msg".padLeft(PADDING, '.')
  } else {
    logger.quiet msg.toString()
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.9'
}
